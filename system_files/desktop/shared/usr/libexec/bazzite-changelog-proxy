#!/usr/bin/env node

const http = require('http');
const https = require('https');
const url = require('url');
const fs = require('fs');
const path = require('path');

// Cache file path
const CACHE_DIR = process.env.HOME + '/.cache/bazzite';
const CACHE_FILE = path.join(CACHE_DIR, 'changelog-cache.json');
const CACHE_EXPIRY = 1000 * 60 * 60 * 24; // 24 hours

// Ensure cache directory exists
try {
  fs.mkdirSync(CACHE_DIR, { recursive: true });
} catch (err) {
  // Ignore if it already exists
}

// Create a simple HTTP server on a local port to provide the changelog
const server = http.createServer(async (req, res) => {
  const parsedUrl = url.parse(req.url, true);
  
  // Handle the SteamOS update endpoint
  if (parsedUrl.pathname.includes('steamos-release-notes')) {
    try {
      const changelog = await getBazziteChangelog();
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify(changelog));
    } catch (error) {
      console.error('Error fetching changelog:', error);
      res.writeHead(500, { 'Content-Type': 'text/plain' });
      res.end('Error fetching changelog');
    }
  } else {
    // Pass through all other requests
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not found');
  }
});

// Start the server on the local port
const PORT = 8080;
server.listen(PORT, '127.0.0.1', () => {
  console.log(`Bazzite changelog proxy server running at http://127.0.0.1:${PORT}`);
});

// Function to fetch Bazzite changelog from GitHub API
async function getBazziteChangelog() {
  // First check if we have a recent cache
  if (fs.existsSync(CACHE_FILE)) {
    const stats = fs.statSync(CACHE_FILE);
    const now = new Date();
    if (now.getTime() - stats.mtime.getTime() < CACHE_EXPIRY) {
      // Cache is fresh, use it
      console.log('Using cached changelog');
      const cachedData = JSON.parse(fs.readFileSync(CACHE_FILE, 'utf8'));
      return cachedData;
    }
  }

  console.log('Fetching fresh changelog from GitHub API');
  
  // Format the changelog data in the structure that Steam expects
  let steamFormattedChangelog = {
    success: 1,
    latest_current: {
      buildid: new Date().getTime().toString(),
      version: "Bazzite Changelog",
      languages: ["english"],
      payload: await fetchAndFormatReleases()
    }
  };
  
  // Cache the result
  fs.writeFileSync(CACHE_FILE, JSON.stringify(steamFormattedChangelog), 'utf8');
  
  return steamFormattedChangelog;
}

async function fetchAndFormatReleases() {
  let releases = await fetchGitHubReleases();
  
  // Format the releases into BBCode for Steam UI
  let bbcode = '';
  
  for (const release of releases) {
    // Skip drafts and prereleases
    if (release.draft || release.prerelease) continue;
    
    const releaseDate = new Date(release.published_at).toLocaleDateString();
    
    // Format the title
    bbcode += `[h1]${release.name} (${releaseDate})[/h1]\n`;
    
    // Convert markdown to BBCode (simplified)
    let body = release.body
      // Headers
      .replace(/^###\s+(.*?)$/gm, '[h3]$1[/h3]')
      .replace(/^##\s+(.*?)$/gm, '[h2]$1[/h2]')
      .replace(/^#\s+(.*?)$/gm, '[h1]$1[/h1]')
      
      // Lists
      .replace(/^(\s*)\*\s+(.*?)$/gm, '[*] $2')
      .replace(/^(\s*)-\s+(.*?)$/gm, '[*] $2')
      
      // Links
      .replace(/\[(.*?)\]\((.*?)\)/g, '[url=$2]$1[/url]')
      
      // Bold and italic
      .replace(/\*\*(.*?)\*\*/g, '[b]$1[/b]')
      .replace(/\*(.*?)\*/g, '[i]$1[/i]')

      // Add list tags (simplified)
      .replace(/(\[\*\].*?)(\[\*\]|\[h)/g, '$1[/list]\n$2');

    // Add list tags for multiple items
    if (body.includes('[*]')) {
      body = body.replace(/(\[\*\])/g, '[list]\n$1');
      
      // Close any open list at the end
      if (!body.endsWith('[/list]')) {
        body += '[/list]\n';
      }
    }
    
    bbcode += body + '\n\n[hr]\n\n';
  }
  
  return {
    english: {
      news: bbcode
    }
  };
}

async function fetchGitHubReleases() {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.github.com',
      path: '/repos/ublue-os/bazzite/releases?page=1&per_page=5',
      headers: {
        'User-Agent': 'Bazzite-Changelog-Fetcher',
        'Accept': 'application/vnd.github.v3+json'
      }
    };
    
    https.get(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          resolve(JSON.parse(data));
        } catch (err) {
          reject(err);
        }
      });
    }).on('error', (err) => {
      reject(err);
    });
  });
}